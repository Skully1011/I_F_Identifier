# build with `docker build -t peframe -f Docker/PeframeDockerfile .` from Project directory
# run using `docker run -i -t --name="peframe" --rm peframe  bash`

# get base ubuntu (bionic; 18.04) image
FROM ubuntu

# do these separately so they can be cached as separate steps; when rebuilding image: if python stuff
# fails this will be saved and prevent having to upgrade during every build
RUN apt update 
# RUN apt upgrade -y

# utilities for working in the container
RUN apt install -y vim
RUN apt install -y git

# download and install peframe and dependencies
# requires python >= 3.6.6
RUN apt install -y python3 python3-pip python3-setuptools
RUN python3 -m pip install --upgrade pip setuptools
RUN apt install -y libssl-dev 
# peframe python dependencies
RUN python3 -m pip install swig
# RUN python3 -m pip install setuptools
# RUN python3 -m pip install m2crypto
# now actually install peframe
RUN git clone https://github.com/guelfoweb/peframe.git
WORKDIR /peframe/
RUN python3 setup.py install
USER root
RUN chmod +x /peframe/install.sh
RUN /peframe/install.sh

# COPY ./requirements.txt .
# RUN python3 -m pip install -r ./requirements.txt

# copy in files last to prevent rebuilding update and installation layers when the
# source code and config files are updated
# COPY ./Checking_Result.py .
# COPY ./ThresholdRandomForest.py .
# COPY ./test_article.py .
# COPY ./selected_columns.json .
# COPY ./selected_class.json .
# COPY ./selected_param.json .
# COPY ./dataset/IFIdentifierDataset/malware_apt.h5 .
# COPY ./dataset/IFIdentifierDataset/malware_non_apt.h5 .
# new additions
# COPY ./dataset/AndroidMalwareDetection/TUANDROMD.csv .
# COPY ./tuandromd_selected_columns.json .

# generate requirements.txt for documentation purposes
# NOTE when adding new packages to the container the requirements should be extracted to use for pip installation
# `docker cp malware_identifier:/MalwareIdentifier/requirements.txt .`
RUN python3 -m pip freeze > requirements.txt